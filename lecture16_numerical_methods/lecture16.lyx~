#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title (Plain Frame)
Numerical Analysis in Python
\end_layout

\begin_layout BeginFrame
Overview
\end_layout

\begin_layout Itemize
Briefly cover linear algebra basics/functions that you should know how to
 use
\end_layout

\begin_layout Itemize
Cover numerical methods for solving ODEs
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Linear Algebra
\end_layout

\begin_layout Itemize
Will generally use the numpy linalg package for most linear algebra computations
 (or scipy's linalg package, they have many of the same functions)
\end_layout

\begin_layout Itemize
Commonly used tools:
\end_layout

\begin_deeper
\begin_layout Itemize
Matrix/matrix, matrix/vector, vector,vector products
\end_layout

\begin_layout Itemize
Solving linear equations
\end_layout

\begin_layout Itemize
Eigenvectors/values
\end_layout

\begin_layout Itemize
Decompositions (SVD, Cholesky, LU, etc.)
\end_layout

\end_deeper
\begin_layout Itemize
Let's look at some examples!
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Numerically Solving an ODE
\end_layout

\begin_layout Itemize
First discretize the ODE, note that you already have experience with discretized
 functions evertime you use a vector in numpy!
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Taylor expand a function about a point 
\begin_inset Formula $x_{i+1}$
\end_inset

, then can solve for the derivative:
\begin_inset Formula 
\begin{eqnarray*}
f\left(x_{i+1}\right) & = & f\left(x_{i}\right)+\frac{df}{dx}\Delta x+\cdots\\
\frac{df}{dx} & = & \frac{f\left(x_{i+1}\right)-f\left(x_{i}\right)}{\Delta x}
\end{eqnarray*}

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Consider an ode: 
\begin_inset Formula $\frac{dy}{dt}=f\left(t,y\right)$
\end_inset

 , a possible formula (Forward Euler scheme) for solving this ode for each
 timestep is:
\begin_inset Formula 
\[
y_{i+1}=y_{i}+\Delta t\cdot f\left(t_{i},y_{i}\right)
\]

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Can just iterate through this process until you reach the final time, need
 an initial condition to start 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Many other algorithms to solve this problem, some work better than others
 depending on what equation needs to be solved
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Solving an ODE with scipy
\end_layout

\begin_layout Itemize
The scipy.integrate module has the function odesolve() that works very well
 for numerical ode solving
\end_layout

\begin_layout Itemize
This function will be able to solve a single or a system of 
\series bold
first
\series default
 order differential equations
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Necessary arguments in order: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A function indicating the equation that you wish to solve takes arguments
 (y,t)
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Initial conditions (can be a vector if you have a system of equations) 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Interval to solve over (should be a range of values) 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Advanced options also available such as selecting a specific solver algorithm,
 step sizes for solving, etc.
 
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Examples
\end_layout

\begin_layout Itemize
Lets start by solving basic a basic differential equation:
\begin_inset Formula 
\[
\frac{dx}{dt}=x\left(t\right)
\]

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Equation of motion for mass-spring-damper system:
\begin_inset Formula 
\[
m\frac{d^{2}x}{dt^{2}}=-kx+c\frac{dx}{dt}
\]

\end_inset


\end_layout

\begin_layout Itemize
Wait, but how do we solve a 2nd order ODE with a function that only solves
 first order equations? 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Introduce a new variables: 
\begin_inset Formula $x_{1}=x$
\end_inset

 , 
\begin_inset Formula $x_{2}=\frac{dx}{dt}$
\end_inset

, then equation becomes: 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset Formula 
\begin{eqnarray*}
\frac{dx_{1}}{dt} & = & x_{2}\\
m\frac{dx_{2}}{dt} & = & -kx_{1}+cx_{2}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Lab
\end_layout

\begin_layout Itemize
You will be solving equations of motion for the orbit of the earth around
 the sun
\end_layout

\begin_layout Itemize
The driving ode for this problem is Newton's universal law of gravitation:
\begin_inset Formula 
\[
m\frac{d^{2}r}{dt^{2}}=\frac{GMm}{r_{distance}^{2}}\hat{r}_{distance}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Where 
\begin_inset Formula $G$
\end_inset

 is the gravitational universal constant
\end_layout

\begin_layout Itemize
It is common to represent the value 
\begin_inset Formula $GM=\mu$
\end_inset

 for each planet or object involved.
\end_layout

\end_deeper
\begin_layout Itemize
Need to solve for states of all planets together as need both planets states
 to calculate the next state of either!
\end_layout

\end_body
\end_document
